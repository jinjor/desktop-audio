package main

import (
	"bufio"
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"os"
	"strings"
	"text/template"
)

type Variables struct {
	EnumDefinitions []*EnumDefinition
}
type EnumDefinition struct {
	EnumName   string
	EnumValues []*EnumValue
}
type EnumValue struct {
	VariableName  string
	SerializeName string
}

func main() {
	src := os.Getenv("GOFILE")
	dest := os.Args[2]
	fmt.Println("generating " + dest + " needed by " + src + " ...")

	file, err := os.Open(src)
	if err != nil {
		panic(err)
	}
	defer file.Close()
	scanner := bufio.NewScanner(file)
	enumName := ""
	enumValues := []*EnumValue{}
	enumDefinitions := []*EnumDefinition{}
	for scanner.Scan() {
		line := scanner.Text()
		if strings.HasPrefix(line, "generate-enum") {
			enumName = strings.SplitN(line, " ", 2)[1]
			continue
		}
		if enumName == "" {
			continue
		}
		if line == "EOF" {
			enumDefinition := &EnumDefinition{
				EnumName:   enumName,
				EnumValues: enumValues,
			}
			enumDefinitions = append(enumDefinitions, enumDefinition)
			enumName = ""
			enumValues = []*EnumValue{}
		}
		definition := strings.SplitN(line, " ", 2)
		if len(definition) != 2 {
			continue
		}
		enumValue := &EnumValue{VariableName: definition[0], SerializeName: definition[1]}
		enumValues = append(enumValues, enumValue)
	}
	if err = scanner.Err(); err != nil {
		panic(err)
	}

	variables := Variables{EnumDefinitions: enumDefinitions}
	tmpl, err := template.New("enums.go").Parse(fileTemplate)
	if err != nil {
		panic(err)
	}
	var buf bytes.Buffer
	err = tmpl.Execute(&buf, variables)
	if err != nil {
		panic(err)
	}

	code, err := format.Source(buf.Bytes())
	if err != nil {
		panic(err)
	}
	ioutil.WriteFile(dest, code, 0666)

	fmt.Println("done.")
}

const fileTemplate = `
// Code generated by gen/main.go; DO NOT EDIT.

package audio

{{range $i, $v := .EnumDefinitions}}

const (
{{range $i, $v := $v.EnumValues}}
	{{$v.VariableName}}{{if not $i}} = iota{{end}}{{end}}
)
func {{.EnumName}}FromString(s string) int {
	switch s { {{range $i, $v := $v.EnumValues}}
	case "{{$v.SerializeName}}":
		return {{$v.VariableName}}{{end}}
	}
	return {{(index $v.EnumValues 0).VariableName}}
}
func {{.EnumName}}ToString(d int) string {
	switch d { {{range $i, $v := $v.EnumValues}}
	case {{$v.VariableName}}:
		return "{{$v.SerializeName}}"{{end}}
	}
	return "{{(index $v.EnumValues 0).SerializeName}}"
}
{{end}}
`
